import esbuild from "esbuild";
import process from "process";
import postcss from "postcss";
import postcssNesting from "postcss-nesting";
import builtins from "builtin-modules";
import fs from "fs-extra";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const keepConsole = process.argv[3] === "keep-console";

const renamePlugin = () => ({
	name: "rename-plugin",
	setup(build) {
		build.onEnd(async (result) => {
			const file = build.initialOptions.outfile;
			const parent = path.dirname(file);
			const cssFileName = path.join(parent, "main.css");
			const newCssFileName = path.join(parent, "styles.css");

			if (fs.existsSync(cssFileName)) {
				try {
					if (fs.existsSync(newCssFileName)) {
						fs.unlinkSync(newCssFileName);
					}
					fs.renameSync(cssFileName, newCssFileName);
				} catch (e) {
					console.error("Failed to rename CSS file:", e);
				}
			}
		});
	},
});

const cssReBuild = () => ({
	name: "css-rebuild",

	setup(build) {
		// 注册一个加载器，用于处理所有 CSS 文件
		// filter 参数是一个正则表达式，匹配所有 .css 扩展名的文件
		build.onLoad({ filter: /\.css$/ }, async (args) => {
			try {
				// 读取 CSS 文件内容
				// args.path 包含当前处理的 CSS 文件的完整路径
				const css = await fs.promises.readFile(args.path, "utf8");

				// 使用 PostCSS 处理 CSS 文件
				// postcssNesting 插件允许在 CSS 中使用嵌套语法（类似 SCSS）
				const result = await postcss([postcssNesting]).process(css, {
					from: args.path, // 指定源文件路径，用于生成正确的源映射
				});

				// 获取输出目录路径
				// build.initialOptions.outfile 是最终 JS 输出文件的路径
				const outDir = path.dirname(build.initialOptions.outfile);

				// 确保输出目录存在，如果不存在则创建
				if (!fs.existsSync(outDir)) {
					fs.mkdirSync(outDir, { recursive: true });
				}

				// 返回处理后的 CSS 内容
				// contents: 处理后的 CSS 代码
				// loader: 告诉 esbuild 如何解释这些内容（作为 CSS）
				return {
					contents: result.css,
					loader: "css",
				};
			} catch (error) {
				// 错误处理：如果 CSS 处理过程中出现任何错误
				console.error("Error processing CSS:", error);

				// 返回空内容，避免构建完全失败
				// 这样即使 CSS 处理失败，构建过程仍然可以继续
				return {
					contents: "",
					loader: "css",
				};
			}
		});
	},
});

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	plugins: [renamePlugin(), cssReBuild()],
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2020",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	drop: prod && !keepConsole ? ["console"] : [],
	loader: {
		".ttf": "base64",
	},
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
